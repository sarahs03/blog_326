{
  "hash": "aebafb7455183ff97f535ff45d04a0d6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Project 3: Confidence Intervals\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(resample)\nlibrary(tidyverse)\n```\n:::\n\n\n# p = .45\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 8   # sample size\np <- 0.45  # population proportion\ntest_assump <- n*p\ntest_assump2 <- n * (1 - p)\nlarge_assump = if_else(\n  test_assump > 10,\n  true = TRUE,\n  false = FALSE\n)\n\nlarge_assump2 = if_else(\n  test_assump2 > 10,\n  true = TRUE,\n  false = FALSE\n)\n\ngenerate_samp_prop <- function(n, p) {  \n  x <- rbinom(1, n, p)\n  \n  phat <- x / n\n  phat\n\n  lb <- phat - 1.645 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.645 * sqrt(phat * (1-phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n   phat    lb    ub\n  <dbl> <dbl> <dbl>\n1 0.625 0.343 0.907\n```\n\n\n:::\n\n```{.r .cell-code}\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\n\n\nprop_ci_df <- prop_ci_df |> mutate(ci_width = ub - lb,\n                                   ci_cover_ind = if_else(p > lb & p < ub,\n                                                          true = 1, \n                                                          false = 0))\nprop_ci_df |> summarise(avg_width = mean(ci_width),\n                        coverage_rate = mean(ci_cover_ind))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  avg_width coverage_rate\n      <dbl>         <dbl>\n1     0.534         0.842\n```\n\n\n:::\n\n```{.r .cell-code}\nnp <- n*p\nn_1p <- n * (1 - p)\ntestnp <- if_else(np > 10,\n                   true = TRUE,\n                   false = FALSE)\ntestn_1p <- if_else(n_1p > 10,\n                    true = TRUE,\n                    false = FALSE)\nnp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.6\n```\n\n\n:::\n\n```{.r .cell-code}\nn_1p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.4\n```\n\n\n:::\n\n```{.r .cell-code}\ntestnp # larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ntestn_1p # larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 57   # sample size\np <- 0.45  # population proportion\ntest_assump <- n*p\ntest_assump2 <- n * (1 - p)\nlarge_assump = if_else(\n  test_assump > 10,\n  true = TRUE,\n  false = FALSE\n)\n\nlarge_assump2 = if_else(\n  test_assump2 > 10,\n  true = TRUE,\n  false = FALSE\n)\n\ngenerate_samp_prop <- function(n, p) {  \n  x <- rbinom(1, n, p) \n  \n  phat <- x / n\n  phat\n  \n  lb <- phat - 1.645 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.645 * sqrt(phat * (1-phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n   phat    lb    ub\n  <dbl> <dbl> <dbl>\n1 0.421 0.313 0.529\n```\n\n\n:::\n\n```{.r .cell-code}\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\n\n\nprop_ci_df <- prop_ci_df |> mutate(ci_width = ub - lb,\n                                   ci_cover_ind = if_else(p > lb & p < ub,\n                                                          true = 1, \n                                                          false = 0))\nprop_ci_df |> summarise(avg_width = mean(ci_width),\n                        coverage_rate = mean(ci_cover_ind))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  avg_width coverage_rate\n      <dbl>         <dbl>\n1     0.215         0.887\n```\n\n\n:::\n\n```{.r .cell-code}\nnp <- n*p\nn_1p <- n * (1 - p)\ntestnp <- if_else(np > 10,\n                   true = TRUE,\n                   false = FALSE)\ntestn_1p <- if_else(n_1p > 10,\n                    true = TRUE,\n                    false = FALSE)\nnp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25.65\n```\n\n\n:::\n\n```{.r .cell-code}\nn_1p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 31.35\n```\n\n\n:::\n\n```{.r .cell-code}\ntestnp # larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ntestn_1p # larger than 10? \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 793   # sample size\np <- 0.45  # population proportion\ntest_assump <- n*p\ntest_assump2 <- n * (1 - p)\nlarge_assump = if_else(\n  test_assump > 10,\n  true = TRUE,\n  false = FALSE\n)\n\nlarge_assump2 = if_else(\n  test_assump2 > 10,\n  true = TRUE,\n  false = FALSE\n)\n\ngenerate_samp_prop <- function(n, p) {  \n  x <- rbinom(1, n, p) \n  \n  phat <- x / n\n  phat\n  \n  lb <- phat - 1.645 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.645 * sqrt(phat * (1-phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n   phat    lb    ub\n  <dbl> <dbl> <dbl>\n1 0.431 0.402 0.460\n```\n\n\n:::\n\n```{.r .cell-code}\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\n\n\nprop_ci_df <- prop_ci_df |> mutate(ci_width = ub - lb,\n                                   ci_cover_ind = if_else(p > lb & p < ub,\n                                                          true = 1, \n                                                          false = 0))\nprop_ci_df |> summarise(avg_width = mean(ci_width),\n                        coverage_rate = mean(ci_cover_ind))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  avg_width coverage_rate\n      <dbl>         <dbl>\n1    0.0581         0.904\n```\n\n\n:::\n\n```{.r .cell-code}\nnp <- n*p\nn_1p <- n * (1 - p)\ntestnp <- if_else(np > 10,\n                   true = TRUE,\n                   false = FALSE)\ntestn_1p <- if_else(n_1p > 10,\n                    true = TRUE,\n                    false = FALSE)\nnp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 356.85\n```\n\n\n:::\n\n```{.r .cell-code}\nn_1p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 436.15\n```\n\n\n:::\n\n```{.r .cell-code}\ntestnp # larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ntestn_1p # larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n# p = .03\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 8   # sample size\np <- 0.03  # population proportion\ntest_assump <- n*p\ntest_assump2 <- n * (1 - p)\nlarge_assump = if_else(\n  test_assump > 10,\n  true = TRUE,\n  false = FALSE\n)\n\nlarge_assump2 = if_else(\n  test_assump2 > 10,\n  true = TRUE,\n  false = FALSE\n)\n\ngenerate_samp_prop <- function(n, p) {  \n  x <- rbinom(1, n, p) \n  \n  phat <- x / n\n  phat\n  \n  lb <- phat - 1.645 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.645 * sqrt(phat * (1-phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n   phat    lb    ub\n  <dbl> <dbl> <dbl>\n1     0     0     0\n```\n\n\n:::\n\n```{.r .cell-code}\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\n\n\nprop_ci_df <- prop_ci_df |> mutate(ci_width = ub - lb,\n                                   ci_cover_ind = if_else(p > lb & p < ub,\n                                                          true = 1, \n                                                          false = 0))\nprop_ci_df |> summarise(avg_width = mean(ci_width),\n                        coverage_rate = mean(ci_cover_ind))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  avg_width coverage_rate\n      <dbl>         <dbl>\n1    0.0881         0.220\n```\n\n\n:::\n\n```{.r .cell-code}\nnp <- n*p\nn_1p <- n * (1 - p)\ntestnp <- if_else(np > 10,\n                   true = TRUE,\n                   false = FALSE)\ntestn_1p <- if_else(n_1p > 10,\n                    true = TRUE,\n                    false = FALSE)\nnp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.24\n```\n\n\n:::\n\n```{.r .cell-code}\nn_1p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.76\n```\n\n\n:::\n\n```{.r .cell-code}\ntestnp # larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ntestn_1p # larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 57   # sample size\np <- 0.03  # population proportion\ntest_assump <- n*p\ntest_assump2 <- n * (1 - p)\nlarge_assump = if_else(\n  test_assump > 10,\n  true = TRUE,\n  false = FALSE\n)\n\nlarge_assump2 = if_else(\n  test_assump2 > 10,\n  true = TRUE,\n  false = FALSE\n)\n\ngenerate_samp_prop <- function(n, p) {  \n  x <- rbinom(1, n, p)\n  \n  phat <- x / n\n  phat\n  \n  lb <- phat - 1.645 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.645 * sqrt(phat * (1-phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n   phat    lb    ub\n  <dbl> <dbl> <dbl>\n1     0     0     0\n```\n\n\n:::\n\n```{.r .cell-code}\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\n\n\nprop_ci_df <- prop_ci_df |> mutate(ci_width = ub - lb,\n                                   ci_cover_ind = if_else(p > lb & p < ub,\n                                                          true = 1, \n                                                          false = 0))\nprop_ci_df |> summarise(avg_width = mean(ci_width),\n                        coverage_rate = mean(ci_cover_ind))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  avg_width coverage_rate\n      <dbl>         <dbl>\n1    0.0649         0.819\n```\n\n\n:::\n\n```{.r .cell-code}\nnp <- n*p\nn_1p <- n * (1 - p)\ntestnp <- if_else(np > 10,\n                   true = TRUE,\n                   false = FALSE)\ntestn_1p <- if_else(n_1p > 10,\n                    true = TRUE,\n                    false = FALSE)\nnp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.71\n```\n\n\n:::\n\n```{.r .cell-code}\nn_1p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55.29\n```\n\n\n:::\n\n```{.r .cell-code}\ntestnp# larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ntestn_1p # larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 793   # sample size\np <- 0.03  # population proportion\ntest_assump <- n*p\ntest_assump2 <- n * (1 - p)\nlarge_assump = if_else(\n  test_assump > 10,\n  true = TRUE,\n  false = FALSE\n)\n\nlarge_assump2 = if_else(\n  test_assump2 > 10,\n  true = TRUE,\n  false = FALSE\n)\n\ngenerate_samp_prop <- function(n, p) {  \n  x <- rbinom(1, n, p) \n  \n  phat <- x / n\n  phat\n  \n  lb <- phat - 1.645 * sqrt(phat * (1 - phat) / n)\n  ub <- phat + 1.645 * sqrt(phat * (1-phat) / n)\n  \n  prop_df <- tibble(phat, lb, ub)\n  return(prop_df)\n}\n\ngenerate_samp_prop(n = n, p = p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n    phat     lb     ub\n   <dbl>  <dbl>  <dbl>\n1 0.0303 0.0203 0.0403\n```\n\n\n:::\n\n```{.r .cell-code}\nn_sim <- 5000\n\nprop_ci_df <- map(1:n_sim,\n    \\(i) generate_samp_prop(n = n, p = p)) |>\n  bind_rows()\n\n\nprop_ci_df <- prop_ci_df |> mutate(ci_width = ub - lb,\n                                   ci_cover_ind = if_else(p > lb & p < ub,\n                                                          true = 1, \n                                                          false = 0))\nprop_ci_df |> summarise(avg_width = mean(ci_width),\n                        coverage_rate = mean(ci_cover_ind))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  avg_width coverage_rate\n      <dbl>         <dbl>\n1    0.0198         0.886\n```\n\n\n:::\n\n```{.r .cell-code}\nnp <- n*p\nn_1p <- n * (1 - p)\ntestnp <- if_else(np > 10,\n                   true = TRUE,\n                   false = FALSE)\ntestn_1p <- if_else(n_1p > 10,\n                    true = TRUE,\n                    false = FALSE)\nnp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23.79\n```\n\n\n:::\n\n```{.r .cell-code}\nn_1p\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 769.21\n```\n\n\n:::\n\n```{.r .cell-code}\ntestnp # larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ntestn_1p # larger than 10?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n|           |               | $n = 8$ | $n = 57$ | $n = 793$ |\n|:---------:|:-------------:|:-------:|:--------:|:---------:|\n| $p = .03$ | Coverage Rate |  .222   |   .807   |   .880    |\n| $p = .45$ | Coverage Rate |  .845   |   .89    |   .904    |\n|           |               |         |          |           |\n| $p = .03$ | Average Width |  .0882  |  .0642   |   .0198   |\n| $p = .45$ | Average Width |  .536   |   .215   |   .0581   |\n\n: Table of Results {.striped .hover}\n\n## Findings\n\nThe large sample assumption for 3 of the 6 settings holds, while 3 of the 6 settings violate the large sample assumption. Both settings with p = .03 and p = .45 are violated when n = 8. When tested using the equations `n*p` and `n*(1-p)`, the results for p = .03 (.24, 7.76) and p = .45 (3.6, 4.4) are less than 10. This also occurs for the `n*p` equation when p = .03 and n = 57 (resulting in 1.71), making that the third large sample assumption violation. When n = 793, both equations result in values larger than ten for both population proportions (23.79, 769.21 for when p = .03 and 356.85, 436.15 for when p = .45), meaning that the large sample assumption holds. The same goes for the setting n = 57 and p = .45.\n\nFor the settings that passed the large sample assumption, the coverage rate was close to or at .9 because the confidence interval is 90%. Due to (n = 57, p = .45) and (n = 793, p = .45) both passing the large sample assumption, it can be observed that the coverage rate doesn't change much as n increases and is equivalent to .9 when rounded. When n = 8, the coverage rates for p = .03 and p = .45 were .222 and .845 respectfully, while the coverage rate for (n = 57 and p = .03) was .807. These three settings failed the large sample assumption and were all around .85 or less, meaning that when the large sample assumption fails to hold, the coverage rate is not .9 or very close to .9. This means that the intervals given by these settings wouldn't be a good 90% confidence interval, because the amount of coverage isn't close enough to .90.\n\nThe average width for p = .45 decreased as n increased, going from .536 when n = 8 to .0581 when n = 793. This decrease can also be seen for p = .03 as the average width goes from .0882 to .0198. Although the large sample assumption fails when (n = 8, p = .45) it does hold for (n = 57, p = .45) and (n = 793, p = .45), which can explain the average width of (n = 57, p = .45) being larger than (n = 793, p = .45). However, due to (n = 8, p = .03) and (n = 57, p = .03) both also failing the assumption, it is hard to tell if that is truly the case. Since `t*(s/sqrt(n))` from the confidence interval formula controls the width of the interval, it makes sense that the width would decrease as n increases due to n being the denominator. It could also potentially explain why (n = 8, p = .45) is still larger than (n = 57, p = .45) and why the first two samples sizes have larger average widths than n = 793 when p = .03 despite the large assumption failing to hold.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}