{
  "hash": "a75c2c47dda258f8b0b6a436cf3089a3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Project 1: Simulation\"\n---\n\n\n## CODE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Normal Minimum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nmu <- 10     # population mean\nsigma <- 4   # population standard deviation\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rnorm(n, mu, sigma) |> round(2)\n\n# compute the sample min\nsample_min <- min(single_sample)\n\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 500)) |>\n  mutate(xvals_density = dnorm(xvals, mu, sigma))\n\n## plot the population model density curve\nnorm_popmin <- ggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  geom_vline(xintercept = sample_min, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Normal with Mu = 10 and sigma = 4\", subtitle = \"With red line representing the sample minimum\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 4        # population standard deviation\n\ngenerate_samp_min <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnsim <- 5000      # number of simulations\n\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(mu = mu, sigma = sigma, n = n))\n\nmins_df <- tibble(mins)\n\nnorm_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Minimums\",\n       title = paste(\"Sampling Distribution of the \\nSample Minimum when n =\", n))\n\nsumstn <- mins_df |>\n  summarise(min_samp_dist = min(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins),\n            mean_samp_dist = mean(mins))\nsumstn\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  min_samp_dist var_samp_dist sd_samp_dist mean_samp_dist\n          <dbl>         <dbl>        <dbl>          <dbl>\n1         -5.92          7.16         2.68           5.29\n```\n\n\n:::\n:::\n\n\n## Normal Maximum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5       # sample size\nmu <- 10     # population mean\nsigma <- 4   # population standard deviation\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rnorm(n, mu, sigma) |> round(2)\n\n# compute the sample min\nsample_max <- max(single_sample)\n\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(mu - 4 * sigma, mu + 4 * sigma, length.out = 500)) |>\n  mutate(xvals_density = dnorm(xvals, mu, sigma))\n\n## plot the population model density curve\nnorm_popmax <- ggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  geom_vline(xintercept = sample_max, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Normal with Mu = 10 and sigma = 4\", subtitle = \"With red line representing the sample maximum\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 4        # population standard deviation\n\ngenerate_samp_max <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnsim <- 5000      # number of simulations\n\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(mu = mu, sigma = sigma, n = n))\n\n\nmaxs_df <- tibble(maxs)\n\nnorm_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maximums\",\n       title = paste(\"Sampling Distribution of the \\nSample Maximums when n =\", n))\n\nsumstx <- maxs_df |>\n  summarise(max_samp_dist = max(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs),\n            mean_samp_dist = mean(maxs))\nsumstx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  max_samp_dist var_samp_dist sd_samp_dist mean_samp_dist\n          <dbl>         <dbl>        <dbl>          <dbl>\n1          26.9          7.10         2.66           14.7\n```\n\n\n:::\n:::\n\n\n## Uniform Minimum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\ntheta1 <- 7\ntheta2 <- 13\nmu <- (theta1 + theta2) / 2   # population mean\nsigma_sq <- (theta2 - theta1)^2 / 12  # var\nsigma <- sqrt(sigma_sq) # population s.d\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- runif(n, theta1, theta2) |> round(2)\n\n# compute the sample min\nsample_min <- min(single_sample)\n\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(7, 13, length.out = 1000),\n                  xvals_density = dunif(xvals, 7, 13),\n                  pop = \"uniform(7, 13)\")\n## plot the population model density curve\nunif_popmin <- ggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  geom_vline(xintercept = sample_min, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Uniform with Theta1 = 7 and Theta2 = 13\", subtitle = \"With red line representing the sample minimum\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\ntheta1 <- 7\ntheta2 <- 13\nmu <- (theta1 + theta2) / 2   # population mean\nsigma_sq <- (theta2 - theta1)^2 / 12  # var\nsigma <- sqrt(sigma_sq)\n\ngenerate_samp_min <- function(theta1, theta2, n) {\n  \n  single_sample <- runif(n, theta1, theta2)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n\nnsim <- 5000      # number of simulations\n\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(theta1 = theta1, theta2 = theta2, n = n))\n\nmins_df <- tibble(mins)\n\n\nunif_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Minimums\",\n       title = paste(\"Sampling Distribution of the \\nSample Minimum when n =\", n))\n\nsumstum <- mins_df |>\n  summarise(min_samp_dist = min(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins),\n            mean_samp_dist = mean(mins))\nsumstum\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  min_samp_dist var_samp_dist sd_samp_dist mean_samp_dist\n          <dbl>         <dbl>        <dbl>          <dbl>\n1          7.00         0.723        0.851           8.00\n```\n\n\n:::\n:::\n\n\n## Uniform Maximum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\ntheta1 <- 7\ntheta2 <- 13\nmu <- (theta1 + theta2) / 2   # population mean\nsigma_sq <- (theta2 - theta1)^2 / 12  # var\nsigma <- sqrt(sigma_sq) # population s.d\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- runif(n, theta1, theta2) |> round(2)\n\n# compute the sample min\nsample_max <- max(single_sample)\n\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(7, 13, length.out = 1000),\n                  xvals_density = dunif(xvals, 7, 13),\n                  pop = \"uniform(7, 13)\")\n\n## plot the population model density curve\nunif_popmax <- ggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  geom_vline(xintercept = sample_max, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Uniform with Theta1 = 7 and Theta2 = 13\", subtitle = \"With red line representing the sample maximum\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\ntheta1 <- 7\ntheta2 <- 13\nmu <- (theta1 + theta2) / 2   # population mean\nsigma_sq <- (theta2 - theta1)^2 / 12  # var\nsigma <- sqrt(sigma_sq) # population s.d\n\ngenerate_samp_max <- function(theta1, theta2, n) {\n  \n  single_sample <- runif(n, theta1, theta2)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnsim <- 5000      # number of simulations\n\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(theta1 = theta1, theta2 = theta2, n = n))\n\nmaxs_df <- tibble(maxs)\n\n\nunif_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maximums\",\n       title = paste(\"Sampling Distribution of the \\nSample Maximum when n =\", n))\n\nsumstux <- maxs_df |>\n  summarise(max_samp_dist = max(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs),\n            mean_samp_dist = mean(maxs))\nsumstux\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  max_samp_dist var_samp_dist sd_samp_dist mean_samp_dist\n          <dbl>         <dbl>        <dbl>          <dbl>\n1          13.0         0.724        0.851           12.0\n```\n\n\n:::\n:::\n\n\n## Exponential Minimum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\nlambda <- .5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rexp(n, lambda) |> round(2)\n\n# compute the sample min\nsample_min <- min(single_sample)\n\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(0, mu + 4 * sigma, length.out = 500)) |>\n  mutate(xvals_density = dexp(xvals, lambda))\n## plot the population model density curve\nexp_popmin <- ggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  geom_vline(xintercept = sample_min, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Exponential with lambda = 0.5\", subtitle = \"With red line representing the sample minimum\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\nlambda <- .5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\ngenerate_samp_min <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\n\nnsim <- 5000      # number of simulations\n\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(lambda = lambda, n = n))\n\nmins_df <- tibble(mins)\n\nexp_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Minimums\",\n       title = paste(\"Sampling Distribution of the \\nSample Minimum when n =\", n))\n\nsumstem <- mins_df |>\n  summarise(min_samp_dist = min(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins),\n            mean_samp_dist = mean(mins))\nsumstem\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  min_samp_dist var_samp_dist sd_samp_dist mean_samp_dist\n          <dbl>         <dbl>        <dbl>          <dbl>\n1      0.000154         0.167        0.408          0.408\n```\n\n\n:::\n:::\n\n\n## Exponential Maximum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\nlambda <- .5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rexp(n, lambda) |> round(2)\n\n# compute the sample min\nsample_max <- max(single_sample)\n\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(0, mu + 4 * sigma, length.out = 500)) |>\n  mutate(xvals_density = dexp(xvals, lambda))\n\n## plot the population model density curve\nexp_popmax <- ggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  geom_vline(xintercept = sample_max, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Exponential with lambda = 0.5\", subtitle = \"With red line representing the sample maximum\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\nlambda <- .5\nmu <- 1 / lambda   # population mean\nsigma <- sqrt(1 / lambda ^ 2)  # population standard deviation\n\ngenerate_samp_max <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n\nnsim <- 5000      # number of simulations\n\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(lambda = lambda, n = n))\n\nmaxs_df <- tibble(maxs)\n\nexp_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maximums\",\n       title = paste(\"Sampling Distribution of the \\nSample Maximum when n =\", n))\n\nsumstex <- maxs_df |>\n  summarise(max_samp_dist = max(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs),\n            mean_samp_dist = mean(maxs))\nsumstex\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  max_samp_dist var_samp_dist sd_samp_dist mean_samp_dist\n          <dbl>         <dbl>        <dbl>          <dbl>\n1          23.2          5.60         2.37           4.57\n```\n\n\n:::\n:::\n\n\n## Beta Minimum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\nalpha <- 8\nbeta <- 2\nmu <- alpha / (alpha + beta)   # population mean\nsigma_sq <- (alpha*beta) / (((alpha + beta)^2) * (alpha + beta + 1))  # var\nsigma <- sqrt(sigma_sq) # population s.d\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rbeta(n, alpha, beta) |> round(2)\n\n# compute the sample min\nsample_min <- min(single_sample)\n\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(0, 1, length.out = 1000),\n                  xvals_density = dbeta(xvals, 8, 2),\n                  pop = \"beta(8, 2)\")\n\n## plot the population model density curve\nbeta_popmin <- ggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  geom_vline(xintercept = sample_min, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Beta with alpha = 8 and beta = 2\", subtitle = \"With red line representing the sample minimum\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\nalpha <- 8\nbeta <- 2\nmu <- alpha / (alpha + beta)   # population mean\nsigma_sq <- (alpha*beta) / (((alpha + beta)^2) * (alpha + beta + 1))  # var\nsigma <- sqrt(sigma_sq) # population s.d\n\n\ngenerate_samp_min <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnsim <- 5000      # number of simulations\n\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(alpha = alpha, beta = beta, n = n))\n\nmins_df <- tibble(mins)\n\nbeta_min <- ggplot(data = mins_df, aes(x = mins)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Minimums\",\n       title = paste(\"Sampling Distribution of the \\nSample Minimum when n =\", n))\n\nsumstbm <- mins_df |>\n  summarise(min_samp_dist = min(mins),\n            var_samp_dist = var(mins),\n            sd_samp_dist = sd(mins),\n            mean_samp_dist = mean(mins))\nsumstbm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  min_samp_dist var_samp_dist sd_samp_dist mean_samp_dist\n          <dbl>         <dbl>        <dbl>          <dbl>\n1         0.256        0.0110        0.105          0.647\n```\n\n\n:::\n:::\n\n\n## Beta Maximum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\nalpha <- 8\nbeta <- 2\nmu <- alpha / (alpha + beta)   # population mean\nsigma_sq <- (alpha*beta) / (((alpha + beta)^2) * (alpha + beta + 1))  # var\nsigma <- sqrt(sigma_sq) # population s.d\n\n# generate a random sample of n observations from a normal population\nsingle_sample <- rbeta(n, alpha, beta) |> round(2)\n\n# compute the sample min\nsample_max <- max(single_sample)\n\n# generate a range of values that span the population\nplot_df <- tibble(xvals = seq(0, 1, length.out = 1000),\n                  xvals_density = dbeta(xvals, 8, 2),\n                  pop = \"beta(8, 2)\")\n\n## plot the population model density curve\nbeta_popmax <- ggplot(data = plot_df, aes(x = xvals, y = xvals_density)) +\n  geom_line() +\n  theme_minimal() +\n  geom_jitter(data = tibble(single_sample), aes(x = single_sample, y = 0),\n              width = 0, height = 0.005) +\n  geom_vline(xintercept = sample_max, colour = \"red\") +\n  labs(x = \"y\", y = \"density\",\n       title = \"Beta with alpha = 8 and beta = 2\", subtitle = \"With red line representing the sample maximum\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5 # sample size\nalpha <- 8\nbeta <- 2\nmu <- alpha / (alpha + beta)   # population mean\nsigma_sq <- (alpha*beta) / (((alpha + beta)^2) * (alpha + beta + 1))  # var\nsigma <- sqrt(sigma_sq) # population s.d\n\ngenerate_samp_max <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\n\nnsim <- 5000      # number of simulations\n\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(alpha = alpha, beta = beta, n = n))\n\nmaxs_df <- tibble(maxs)\n\nbeta_max <- ggplot(data = maxs_df, aes(x = maxs)) +\n  geom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Maximums\",\n       title = paste(\"Sampling Distribution of the \\nSample Maximum when n =\", n))\n\nsumstbx <- maxs_df |>\n  summarise(max_samp_dist = max(maxs),\n            var_samp_dist = var(maxs),\n            sd_samp_dist = sd(maxs),\n            mean_samp_dist = mean(maxs))\nsumstbx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  max_samp_dist var_samp_dist sd_samp_dist mean_samp_dist\n          <dbl>         <dbl>        <dbl>          <dbl>\n1         0.999       0.00212       0.0460          0.921\n```\n\n\n:::\n:::\n\n\n## Methods\n\nFor this project, I created two population models for each of the distributions, one with a red line for the sample minimum, and another with a red line for the sample maximum. I then created histograms showing the sample minimums and maximums for each distribution, and included code that calculated the mean, variance, and standard deviation for the table.\n\nIn order to answer question 2, I found the CDF and pdf of Exp(.2), then put them into the equations needed to find the pdfs for Ymin and Ymax. After that, I used integration to find the expected values and the variances needed to compute the standard error, after which I then compared to the simulated results. I also made rough sketches of the theoretical graphs, which were then compared to the simulated ones.\n\n## GRAPHS\n\n## Normal: Population, Sampling Minimum, Sampling Maximum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnorm_popmin\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnorm_popmax\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n\n```{.r .cell-code}\nnorm_min\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-3.png){width=672}\n:::\n\n```{.r .cell-code}\nnorm_max\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-4.png){width=672}\n:::\n:::\n\n\n## Uniform: Population, Sampling Minimum, Sampling Maximum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunif_popmin\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\nunif_popmax\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n\n```{.r .cell-code}\nunif_min\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-3.png){width=672}\n:::\n\n```{.r .cell-code}\nunif_max\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-4.png){width=672}\n:::\n:::\n\n\n## Exponential: Population, Sampling Minimum, Sampling Maximum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexp_popmin\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\nexp_popmax\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n\n```{.r .cell-code}\nexp_min\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-3.png){width=672}\n:::\n\n```{.r .cell-code}\nexp_max\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-4.png){width=672}\n:::\n:::\n\n\n## Beta: Population, Sampling Minimum, Sampling Maximum\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeta_popmin\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbeta_popmax\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n\n```{.r .cell-code}\nbeta_min\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-3.png){width=672}\n:::\n\n```{.r .cell-code}\nbeta_max\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-4.png){width=672}\n:::\n:::\n\n\n## TABLE\n\n|                      | $\\text{N}(\\mu = 10, \\sigma^2 = 4)$ | $\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$ | $\\text{Exp}(\\lambda = 0.5)$ | $\\text{Beta}(\\alpha = 8, \\beta = 2)$ |\n|:------------:|:--------------:|:------------:|:------------:|:------------:|\n| $\\text{E}(Y_{min})$  |                5.3                 |                   8.004                    |             0.4             |                0.646                 |\n| $\\text{E}(Y_{max})$  |               14.67                |                     12                     |            4.56             |                0.922                 |\n|                      |                                    |                                            |                             |                                      |\n| $\\text{SE}(Y_{min})$ |                2.67                |                   0.846                    |             0.4             |                0.106                 |\n| $\\text{SE}(Y_{max})$ |                2.68                |                   0.829                    |            2.39             |                0.045                 |\n\n: Table of Results {.striped .hover}\n\n## QUESTIONS\n\n## Question 1\n\nBriefly summarise how and compare for each of the above population models. Can you propose a general rule or result for how and compare for a given population?\n\nFor normal and uniform population models, the standard errors of the sample minimums and maximums are pretty close, with the standard errors for the normal distribution having a difference of only .01 and the standard errors for the uniform distribution having a difference of .017. The beta model's standard errors are also close with a difference of .061. The exponential model, however, has standard errors that have a large difference. The sample minimum is a small .4 while the sample maximum's standard error is 2.39, a difference of almost 2. For normal and uniform populations, you can expect the standard errors to be very close together. For beta populations, you can expect the standard errors to be close together but not as close as the normal or uniform populations. For exponential populations, you can expect the standard errors to be far apart. Due to the difference in the exponential population's standard errors, there can't be a general rule for all populations. There can be a general rule for three of them: normal, uniform, and beta. That rule would be that the standard errors for the sample minimums and maximums will be close together with a difference of less than one.\n\n## Question 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 5, length.out = 1000)\n## CHANGE to be the pdf you calculated. Note that, as of now, \n## this is not a proper density (it does not integrate to 1).\ndensity <- n * exp(-(2.5) * x)\n\n\n## put into tibble and plot\nsamp_min_df <- tibble(x, density)\nggplot(data = samp_min_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\npdf of Ymin: n(1 - F(y))\\^(n-1) *f(y) = 5(1 - e\\^(-.5y)) \\^4* .5e\\^(-.5y) = 2.5e\\^(-2.5y)\n\nE(Ymin) = .4 -\\> integral of 2.5ye\\^(-2.5y) (lower bound = 0, upper bound = infinity)\n\nVar(Ymin) = .32 -\\> integral of 2.5y\\^2 \\* e\\^(-2.5y) (same bounds as the expected value)\n\nSE(Ymin) = .32 - .4\\^2 = .16 = sqrt(.16) = .4\n\nI find that the theoretical and analytical expected values (.4) and standard errors (.4) are the same. My graph is a bit off, though that is likely because I drew more of a rough sketch, though the simulated graph looks close. It's likely that with the simulation being generated again, the simulated SE's and expected values may differ a little bit, but they will still be very close to the theoretical values I found.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\n## CHANGE 0 and 3 to represent where you want your graph to start and end\n## on the x-axis\nx <- seq(0, 5, length.out = 1000)\n## CHANGE to be the pdf you calculated. Note that, as of now, \n## this is not a proper density (it does not integrate to 1).\ndensity <- n * exp((2.5) * x) * (1 - exp(-.5))\n\n\n## put into tibble and plot\nsamp_min_df <- tibble(x, density)\nggplot(data = samp_min_df, aes(x = x, y = density)) +\n  geom_line() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\npdf of Ymax: n(F(y))\\^(n-1) \\* f(y) =\n\n5(1-e^(-.5x))^4 \\* .5e\\^(-.5x) =\n\n2.5e\\^(-2.5x) \\* (1 - e^(-.5x))^4\n\nE(Ymax) = .467 -\\> integral of 2.5xe\\^(-2.5x) \\* (1-e^(-.5x))^4 (lower bound of 0, upper bound of infinity)\n\nVar(Ymax) = 26.71 -\\> integral of 2.5(x\\^2) e\\^(-2.5x) \\* (1-e^(-.5x))^4 (lower bound of 0, upper bound of infinity)\n\nSE(Ymax) = 26.71 - (.467)\\^2 = 26.5028 = sqrt(26.5028) = 5.148\n\nThe theoretical expected value is close to the analytical expected value (about .01 off). My theoretical standard error (5.148) was much higher than the analytical standard error (2.39). I think that this shows a high variety in standard errors for Ymax. My graph was different than the simulation, most likely due to my inability to code a correct simulated version of it. However, the x axis seems pretty similar to each other.\n\n## Findings Summary\n\nThe sample maximums and minimums of the normal, beta, and uniform distributions have standard errors that are very close, while the standard errors for the exponential distribution's sample maximums and minimums are very different from each other. As a result, there can be no general rule for all of the distribution's standard errors, though there can be one for normal, beta, and uniform distributions.\n\nSimulating the pdfs, expected values, and standard errors of Ymax and Ymin and then comparing them to the theoretical results found that Ymin had very close, if not near identical expected values and standard errors, while Ymax had similar expected values but different standard errors. The difference in standard errors could likely be due to varying varieties of sample maximums. The theoretical graphs were a bit different than the analytical graphs, likely due to coding error, however, the x-axes were pretty similar.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}